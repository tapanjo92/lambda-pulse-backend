"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client_sqs_1 = require("@aws-sdk/client-sqs");
// Initialize AWS SDK Clients
const ddbClient = new client_dynamodb_1.DynamoDBClient({});
const ddbDocClient = lib_dynamodb_1.DynamoDBDocumentClient.from(ddbClient);
const sqsClient = new client_sqs_1.SQSClient({});
// Environment variables (we'll set these in CDK)
const TENANT_CONFIG_TABLE_NAME = process.env.TENANT_CONFIG_TABLE_NAME;
const INGESTION_SQS_QUEUE_URL = process.env.INGESTION_SQS_QUEUE_URL;
const handler = async (event) => {
    console.log('Orchestrator Lambda triggered by EventBridge:', JSON.stringify(event));
    if (!TENANT_CONFIG_TABLE_NAME || !INGESTION_SQS_QUEUE_URL) {
        console.error('Missing required environment variables: TENANT_CONFIG_TABLE_NAME or INGESTION_SQS_QUEUE_URL');
        return;
    }
    try {
        // 1. Scan the TenantConfigurationTable to get all tenants
        const scanCommand = new lib_dynamodb_1.ScanCommand({
            TableName: TENANT_CONFIG_TABLE_NAME,
        });
        const scanResult = await ddbDocClient.send(scanCommand);
        const tenants = scanResult.Items || [];
        if (tenants.length === 0) {
            console.log('No tenants found in the configuration table.');
            return;
        }
        console.log(`Found ${tenants.length} tenants. Simulating data ingestion...`);
        for (const tenant of tenants) {
            const tenantId = tenant.tenantId;
            // In a real scenario, we'd use tenant.customerAccountId and tenant.crossAccountRoleArn here
            // to assume role and fetch actual CloudWatch Logs.
            // 2. Simulate finding a cold start log entry for this tenant
            const simulatedLogData = `SIMULATED: REPORT RequestId: sim-${Math.random().toString(36).substring(2, 15)} Init Duration: ${(Math.random() * 300 + 50).toFixed(2)} ms Duration: ${(Math.random() * 350 + 60).toFixed(2)} ms Billed Duration: ${Math.floor(Math.random() * 360 + 60)} ms Memory Size: ${[128, 256, 512][Math.floor(Math.random() * 3)]} MB Max Memory Used: ${Math.floor(Math.random() * 100 + 20)} MB`;
            const simulatedFunctionName = `simulated-function-${['alpha', 'beta', 'gamma'][Math.floor(Math.random() * 3)]}`;
            const simulatedTimestamp = new Date().toISOString();
            const messagePayload = {
                tenantId: tenantId,
                logData: simulatedLogData,
                functionName: simulatedFunctionName,
                timestamp: simulatedTimestamp,
            };
            // 3. Send this simulated data to the SQS Ingestion Queue
            const sendMessageCommand = new client_sqs_1.SendMessageCommand({
                QueueUrl: INGESTION_SQS_QUEUE_URL,
                MessageBody: JSON.stringify(messagePayload),
                MessageAttributes: {
                    'TenantID': { DataType: 'String', StringValue: tenantId }
                }
            });
            await sqsClient.send(sendMessageCommand);
            console.log(`Successfully sent simulated cold start data for tenant ${tenantId} to SQS queue.`);
        }
        console.log('Orchestrator Lambda finished processing all tenants.');
    }
    catch (error) {
        console.error('Error in Orchestrator Lambda:', error);
        // Depending on the error, you might want to throw it to indicate failure for monitoring
        // For a scheduled task, just logging might be sufficient if it can recover on next run
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBMEQ7QUFDMUQsd0RBQTRFO0FBQzVFLG9EQUFvRTtBQUdwRSw2QkFBNkI7QUFDN0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sWUFBWSxHQUFHLHFDQUFzQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM1RCxNQUFNLFNBQVMsR0FBRyxJQUFJLHNCQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFcEMsaURBQWlEO0FBQ2pELE1BQU0sd0JBQXdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQztBQUN0RSxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7QUFFN0QsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQXFCLEVBQWlCLEVBQUU7SUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQ0FBK0MsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFcEYsSUFBSSxDQUFDLHdCQUF3QixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMxRCxPQUFPLENBQUMsS0FBSyxDQUFDLDZGQUE2RixDQUFDLENBQUM7UUFDN0csT0FBTztJQUNULENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSCwwREFBMEQ7UUFDMUQsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDO1lBQ2xDLFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxVQUFVLEdBQUcsTUFBTSxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBRXZDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7WUFDNUQsT0FBTztRQUNULENBQUM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsT0FBTyxDQUFDLE1BQU0sd0NBQXdDLENBQUMsQ0FBQztRQUU3RSxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzdCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDakMsNEZBQTRGO1lBQzVGLG1EQUFtRDtZQUVuRCw2REFBNkQ7WUFDN0QsTUFBTSxnQkFBZ0IsR0FBRyxvQ0FBb0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2xaLE1BQU0scUJBQXFCLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUcsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXBELE1BQU0sY0FBYyxHQUFHO2dCQUNyQixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsT0FBTyxFQUFFLGdCQUFnQjtnQkFDekIsWUFBWSxFQUFFLHFCQUFxQjtnQkFDbkMsU0FBUyxFQUFFLGtCQUFrQjthQUM5QixDQUFDO1lBRUYseURBQXlEO1lBQ3pELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSwrQkFBa0IsQ0FBQztnQkFDaEQsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO2dCQUMzQyxpQkFBaUIsRUFBRTtvQkFDZixVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7aUJBQzVEO2FBQ0YsQ0FBQyxDQUFDO1lBRUgsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwREFBMEQsUUFBUSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xHLENBQUM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7SUFFdEUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RELHdGQUF3RjtRQUN4Rix1RkFBdUY7SUFDekYsQ0FBQztBQUNILENBQUMsQ0FBQztBQTVEVyxRQUFBLE9BQU8sV0E0RGxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgU2NhbkNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xuaW1wb3J0IHsgU1FTQ2xpZW50LCBTZW5kTWVzc2FnZUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc3FzJztcbmltcG9ydCB7IFNjaGVkdWxlZEV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSc7IC8vIEZvciBFdmVudEJyaWRnZSBzY2hlZHVsZWQgZXZlbnRzXG5cbi8vIEluaXRpYWxpemUgQVdTIFNESyBDbGllbnRzXG5jb25zdCBkZGJDbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoe30pO1xuY29uc3QgZGRiRG9jQ2xpZW50ID0gRHluYW1vREJEb2N1bWVudENsaWVudC5mcm9tKGRkYkNsaWVudCk7XG5jb25zdCBzcXNDbGllbnQgPSBuZXcgU1FTQ2xpZW50KHt9KTtcblxuLy8gRW52aXJvbm1lbnQgdmFyaWFibGVzICh3ZSdsbCBzZXQgdGhlc2UgaW4gQ0RLKVxuY29uc3QgVEVOQU5UX0NPTkZJR19UQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEVOQU5UX0NPTkZJR19UQUJMRV9OQU1FO1xuY29uc3QgSU5HRVNUSU9OX1NRU19RVUVVRV9VUkwgPSBwcm9jZXNzLmVudi5JTkdFU1RJT05fU1FTX1FVRVVFX1VSTDtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IFNjaGVkdWxlZEV2ZW50KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnNvbGUubG9nKCdPcmNoZXN0cmF0b3IgTGFtYmRhIHRyaWdnZXJlZCBieSBFdmVudEJyaWRnZTonLCBKU09OLnN0cmluZ2lmeShldmVudCkpO1xuXG4gIGlmICghVEVOQU5UX0NPTkZJR19UQUJMRV9OQU1FIHx8ICFJTkdFU1RJT05fU1FTX1FVRVVFX1VSTCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzOiBURU5BTlRfQ09ORklHX1RBQkxFX05BTUUgb3IgSU5HRVNUSU9OX1NRU19RVUVVRV9VUkwnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIC8vIDEuIFNjYW4gdGhlIFRlbmFudENvbmZpZ3VyYXRpb25UYWJsZSB0byBnZXQgYWxsIHRlbmFudHNcbiAgICBjb25zdCBzY2FuQ29tbWFuZCA9IG5ldyBTY2FuQ29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6IFRFTkFOVF9DT05GSUdfVEFCTEVfTkFNRSxcbiAgICB9KTtcbiAgICBjb25zdCBzY2FuUmVzdWx0ID0gYXdhaXQgZGRiRG9jQ2xpZW50LnNlbmQoc2NhbkNvbW1hbmQpO1xuICAgIGNvbnN0IHRlbmFudHMgPSBzY2FuUmVzdWx0Lkl0ZW1zIHx8IFtdO1xuXG4gICAgaWYgKHRlbmFudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gdGVuYW50cyBmb3VuZCBpbiB0aGUgY29uZmlndXJhdGlvbiB0YWJsZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhgRm91bmQgJHt0ZW5hbnRzLmxlbmd0aH0gdGVuYW50cy4gU2ltdWxhdGluZyBkYXRhIGluZ2VzdGlvbi4uLmApO1xuXG4gICAgZm9yIChjb25zdCB0ZW5hbnQgb2YgdGVuYW50cykge1xuICAgICAgY29uc3QgdGVuYW50SWQgPSB0ZW5hbnQudGVuYW50SWQ7XG4gICAgICAvLyBJbiBhIHJlYWwgc2NlbmFyaW8sIHdlJ2QgdXNlIHRlbmFudC5jdXN0b21lckFjY291bnRJZCBhbmQgdGVuYW50LmNyb3NzQWNjb3VudFJvbGVBcm4gaGVyZVxuICAgICAgLy8gdG8gYXNzdW1lIHJvbGUgYW5kIGZldGNoIGFjdHVhbCBDbG91ZFdhdGNoIExvZ3MuXG5cbiAgICAgIC8vIDIuIFNpbXVsYXRlIGZpbmRpbmcgYSBjb2xkIHN0YXJ0IGxvZyBlbnRyeSBmb3IgdGhpcyB0ZW5hbnRcbiAgICAgIGNvbnN0IHNpbXVsYXRlZExvZ0RhdGEgPSBgU0lNVUxBVEVEOiBSRVBPUlQgUmVxdWVzdElkOiBzaW0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpfSBJbml0IER1cmF0aW9uOiAkeyhNYXRoLnJhbmRvbSgpICogMzAwICsgNTApLnRvRml4ZWQoMil9IG1zIER1cmF0aW9uOiAkeyhNYXRoLnJhbmRvbSgpICogMzUwICsgNjApLnRvRml4ZWQoMil9IG1zIEJpbGxlZCBEdXJhdGlvbjogJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzNjAgKyA2MCl9IG1zIE1lbW9yeSBTaXplOiAke1sxMjgsIDI1NiwgNTEyXVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMyldfSBNQiBNYXggTWVtb3J5IFVzZWQ6ICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMCArIDIwKX0gTUJgO1xuICAgICAgY29uc3Qgc2ltdWxhdGVkRnVuY3Rpb25OYW1lID0gYHNpbXVsYXRlZC1mdW5jdGlvbi0ke1snYWxwaGEnLCAnYmV0YScsICdnYW1tYSddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSozKV19YDtcbiAgICAgIGNvbnN0IHNpbXVsYXRlZFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcblxuICAgICAgY29uc3QgbWVzc2FnZVBheWxvYWQgPSB7XG4gICAgICAgIHRlbmFudElkOiB0ZW5hbnRJZCxcbiAgICAgICAgbG9nRGF0YTogc2ltdWxhdGVkTG9nRGF0YSxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiBzaW11bGF0ZWRGdW5jdGlvbk5hbWUsXG4gICAgICAgIHRpbWVzdGFtcDogc2ltdWxhdGVkVGltZXN0YW1wLFxuICAgICAgfTtcblxuICAgICAgLy8gMy4gU2VuZCB0aGlzIHNpbXVsYXRlZCBkYXRhIHRvIHRoZSBTUVMgSW5nZXN0aW9uIFF1ZXVlXG4gICAgICBjb25zdCBzZW5kTWVzc2FnZUNvbW1hbmQgPSBuZXcgU2VuZE1lc3NhZ2VDb21tYW5kKHtcbiAgICAgICAgUXVldWVVcmw6IElOR0VTVElPTl9TUVNfUVVFVUVfVVJMLFxuICAgICAgICBNZXNzYWdlQm9keTogSlNPTi5zdHJpbmdpZnkobWVzc2FnZVBheWxvYWQpLFxuICAgICAgICBNZXNzYWdlQXR0cmlidXRlczogeyAvLyBPcHRpb25hbDogaWYgeW91IHdhbnQgdG8gYWRkIG1lc3NhZ2UgYXR0cmlidXRlc1xuICAgICAgICAgICAgJ1RlbmFudElEJzogeyBEYXRhVHlwZTogJ1N0cmluZycsIFN0cmluZ1ZhbHVlOiB0ZW5hbnRJZCB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBzcXNDbGllbnQuc2VuZChzZW5kTWVzc2FnZUNvbW1hbmQpO1xuICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBzZW50IHNpbXVsYXRlZCBjb2xkIHN0YXJ0IGRhdGEgZm9yIHRlbmFudCAke3RlbmFudElkfSB0byBTUVMgcXVldWUuYCk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ09yY2hlc3RyYXRvciBMYW1iZGEgZmluaXNoZWQgcHJvY2Vzc2luZyBhbGwgdGVuYW50cy4nKTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIE9yY2hlc3RyYXRvciBMYW1iZGE6JywgZXJyb3IpO1xuICAgIC8vIERlcGVuZGluZyBvbiB0aGUgZXJyb3IsIHlvdSBtaWdodCB3YW50IHRvIHRocm93IGl0IHRvIGluZGljYXRlIGZhaWx1cmUgZm9yIG1vbml0b3JpbmdcbiAgICAvLyBGb3IgYSBzY2hlZHVsZWQgdGFzaywganVzdCBsb2dnaW5nIG1pZ2h0IGJlIHN1ZmZpY2llbnQgaWYgaXQgY2FuIHJlY292ZXIgb24gbmV4dCBydW5cbiAgfVxufTtcbiJdfQ==